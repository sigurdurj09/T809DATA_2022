features = np.array([[1,1],[3,2],[2,4],[4,5],[5,8],[6,3]])
targets = np.array([0,0,0,1,1,1])
classes = [0,1]

For this dataset we only have 2 features (2 dimensions), 2 labels (red+blue) and 6 points.  When testing our methods, it's much easier to see if we are doing the correct thing.  For example:
- The distance between points 3 and 5 is 5.  The distance between points 1-2 is squareroot of 5. Distance between points 4 and 6 is 2*sqrt(2)
- Decision Tree: Brute force for finding the best split should give us x somewhere between 3 and 4 (for example x = 3.5).
- Gini impurity: x = 2.5 and x = 4.5 should have the same gini impurity (and be higher than x = 3.5)
- Gini impurity: y = 2.5 and y = 4.5 should also have the same gini impurity
- kNN: Prediction for point (0,0) with k = 3 is red, for point (10,10) the prediction is blue
- kNN: Prediction for point (4,3) is red if k = 1, blue if k = 3 and red if k = 5